# HashWrap Main Server Configuration
upstream backend_servers {
    server frontend:80 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream api_servers {
    server backend:8000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Health Check Endpoint
server {
    listen 80;
    server_name health.internal;
    access_log off;
    
    location /health {
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# Main HashWrap Server
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Connection limits
    limit_conn conn_limit_per_ip 20;
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Security: Block common attacks
    location ~ /\. {
        deny all;
        return 404;
    }
    
    location ~* \.(env|log|ini|conf)$ {
        deny all;
        return 404;
    }
    
    # Block user agents
    if ($http_user_agent ~* (nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|skygrid)) {
        return 444;
    }
    
    # API Routes with rate limiting
    location /api/ {
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        
        # Proxy to backend
        proxy_pass http://api_servers/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts for API calls
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 300s;
        
        # Buffer settings for large responses
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    
    # Authentication endpoints with strict rate limiting
    location ~ ^/api/(auth|login|register) {
        limit_req zone=auth burst=5 nodelay;
        
        proxy_pass http://api_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Shorter timeouts for auth
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # Upload endpoints with special handling
    location ~ ^/api/.*/(upload|file) {
        limit_req zone=upload burst=10 nodelay;
        
        # Larger client body size for uploads
        client_max_body_size 100m;
        client_body_buffer_size 1m;
        client_body_timeout 60s;
        
        proxy_pass http://api_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Extended timeouts for uploads
        proxy_connect_timeout 30s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Disable proxy buffering for large uploads
        proxy_request_buffering off;
        proxy_buffering off;
    }
    
    # WebSocket support for real-time updates
    location /ws/ {
        proxy_pass http://api_servers/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific settings
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_buffering off;
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://api_servers/health;
        proxy_set_header Host $host;
        access_log off;
    }
    
    # Static files and frontend
    location / {
        proxy_pass http://backend_servers/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Caching for static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://backend_servers;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            
            # CORS for fonts and assets
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
        }
        
        # Special handling for service worker
        location /sw.js {
            proxy_pass http://backend_servers/sw.js;
            expires off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
    }
    
    # Security: Block admin paths
    location ~ ^/(admin|phpmyadmin|wp-admin|wp-login) {
        deny all;
        return 444;
    }
    
    # Monitoring endpoint (internal only)
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
}

# SSL Server Configuration (Template)
# Uncomment and configure when SSL certificates are available
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name your-domain.com;
#     
#     # SSL Configuration
#     ssl_certificate /etc/nginx/ssl/cert.pem;
#     ssl_certificate_key /etc/nginx/ssl/key.pem;
#     ssl_trusted_certificate /etc/nginx/ssl/chain.pem;
#     
#     # SSL Security Settings
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_prefer_server_ciphers on;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_stapling on;
#     ssl_stapling_verify on;
#     
#     # HSTS
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
#     
#     # Include all the location blocks from the HTTP server above
#     include /etc/nginx/conf.d/locations/*.conf;
# }

# HTTP to HTTPS Redirect (when SSL is enabled)
# server {
#     listen 80;
#     listen [::]:80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }