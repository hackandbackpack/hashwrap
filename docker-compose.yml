version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: hashwrap-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: hashwrap
      POSTGRES_USER: hashwrap
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - hashwrap-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hashwrap -d hashwrap"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Broker
  redis:
    image: redis:7-alpine
    container_name: hashwrap-redis
    restart: unless-stopped
    command: redis-server --requirepass-file /run/secrets/redis_password --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    networks:
      - hashwrap-backend
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hashwrap-backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://hashwrap:${POSTGRES_PASSWORD}@database:5432/hashwrap
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY_FILE: /run/secrets/jwt_secret
      DEBUG: "false"
      API_HOST: "0.0.0.0"
      API_PORT: 8000
    secrets:
      - jwt_secret
      - db_password
      - redis_password
    volumes:
      - upload_data:/data/uploads
      - results_data:/data/results
      - app_logs:/logs
      - wordlists_data:/wordlists:ro
      - rules_data:/rules:ro
    networks:
      - hashwrap-backend
      - hashwrap-frontend
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp/app-tmp
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Celery Workers
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: hashwrap-worker
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://hashwrap:${POSTGRES_PASSWORD}@database:5432/hashwrap
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      CUDA_VISIBLE_DEVICES: "0,1,2,3"
    secrets:
      - db_password
      - redis_password
    volumes:
      - upload_data:/data/uploads
      - results_data:/data/results
      - wordlists_data:/data/wordlists:ro
      - rules_data:/data/rules:ro
      - worker_logs:/logs
      - hashcat_tmp:/tmp/hashcat
    networks:
      - hashwrap-backend
    command: ["python", "-m", "celery", "-A", "celery_app", "worker", "--loglevel=info", "--concurrency=2", "--queues=hashcat,default"]
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Celery Beat Scheduler
  scheduler:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: hashwrap-scheduler
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://hashwrap:${POSTGRES_PASSWORD}@database:5432/hashwrap
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    secrets:
      - db_password
      - redis_password
    volumes:
      - scheduler_data:/data
      - scheduler_logs:/logs
    networks:
      - hashwrap-backend
    command: ["python", "-m", "celery", "-A", "celery_app", "beat", "--loglevel=info"]
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hashwrap-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - hashwrap-frontend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: hashwrap-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    networks:
      - hashwrap-frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Monitoring (Optional - Prometheus metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: hashwrap-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - hashwrap-backend
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

# Networks
networks:
  hashwrap-frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: hashwrap-frontend
  hashwrap-backend:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: hashwrap-backend

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  upload_data:
    driver: local
  results_data:
    driver: local
  wordlists_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./wordlists
  rules_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./rules
  app_logs:
    driver: local
  worker_logs:
    driver: local
  scheduler_logs:
    driver: local
  scheduler_data:
    driver: local
  nginx_logs:
    driver: local
  nginx_cache:
    driver: local
  hashcat_tmp:
    driver: local
  prometheus_data:
    driver: local

# Secrets
secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt